;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+STARTUP: folded
#+OPTIONS: toc:nil h:5
#+TITLE: Literate Doom Emacs configuration


* Personal info
#+begin_src emacs-lisp :tangle yes :results silent
(setq user-full-name "William East"
      user-mail-address "williameast@live.com")
#+end_src
* TODO local machine paths and directories
where projectile looks for projects.
#+begin_src emacs-lisp :tangle yes :results silent
(setq projectile-project-search-path '("~/org/projects"))

(setq org-directory "~/org/")

#+end_src
* Autosave
#+begin_src emacs-lisp :tangle yes :results silent
(setq auto-save-default t)
#+end_src
* User interface
** Theme
#+begin_src emacs-lisp :tangle yes :results silent
(setq doom-theme 'doom-xcode
      doom-themes-enable-bold t)
#+end_src
** TESTING Font
not sure what I am using the modeline icon thing for.
#+begin_src emacs-lisp :tangle yes :results silent
(setq doom-font (font-spec :family "JetBrainsMono" :size 14)
doom-unicode-font (font-spec :family "monospace" :size 12))

(defvar doom-modeline-icon (display-graphic-p))
#+end_src
** Cursor
a blinker that lets you know where you are!
#+begin_src emacs-lisp :tangle yes :results silent
(beacon-mode 1)
#+end_src
** Sideline
Configure if you want absolute or relative line numbers.
#+begin_src emacs-lisp :tangle yes :results silent
(setq display-line-numbers-type 'absolute)
#+end_src
** Window management
show a preview of the window when selecting a split. take space from all windows
when splitting.
#+begin_src emacs-lisp :tangle yes :results silent
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

(setq +ivy-buffer-preview t)

(setq window-combination-resize t)
#+end_src
** TODO Completion
** Transparency
Function to make emacs transparent.
#+begin_src emacs-lisp :tangle no :results silent
(defun toggle-transparency ()
  "Toggle the background to be transparent or not."
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (if (eq
         (if (numberp alpha)
             alpha
           (cdr alpha)) ; may also be nil
         100)
        (set-frame-parameter nil 'alpha '(93 . 93))
      (set-frame-parameter nil 'alpha '(100 . 100)))))
(toggle-transparency)
#+end_src
* Dictionaries
** Default Dictionary
#+begin_src emacs-lisp :tangle yes :results silent
(setq ispell-dictionary "en_GB")
#+end_src
** Switch Dictionary Language
#+begin_src emacs-lisp :tangle yes :results silent
(defun my/switch-to-de-dict ()
  (interactive)
  (ispell-change-dictionary "de_DE")
  (flyspell-buffer))

(defun my/switch-to-en-dict ()
  (interactive)
  (ispell-change-dictionary "en_GB")
  (flyspell-buffer))
#+end_src
* Development
** TODO Language-specific
*** Clang
#+begin_src emacs-lisp :tangle yes :results silent
(setq c-default-style "linux"
      c-basic-offset 4)

(add-hook! 'c-mode-common-hook
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'brace-list-open 0)
  (c-set-offset 'statement-case-open 0))

(after! lsp-clangd
  (setq lsp-clients-clangd-args
        '("--compile-commands-dir=.")))
#+end_src



*** TODO Python
** TODO Debugging
#+begin_src emacs-lisp :tangle yes :results silent
(after! dap-mode
  (require 'dap-gdb-lldb)
  (dap-gdb-lldb-setup)

  (setq dap-auto-configure-features '(sessions locals controls tooltip))


(dap-register-debug-template "GDB::Run"
                            (list :type "gdb"
                                :request "launch"
                                :name "GDB::Run"
                                :gdbpath "gdb"
                                :target nil
                                :cwd nil)))

(use-package! dap-mode
  :config
  (require 'dap-lldb)
  (dap-register-debug-template "C++ :: LLDB Run"
    (list :type "lldb"
          :request "launch"
          :name "C++ Debug"
          :program "${workspaceFolder}/myprog"
          :cwd "${workspaceFolder}"
          :args [])))

#+end_src

** School42
*** 42 header
load the 42 headers.
#+begin_src emacs-lisp :tangle yes :results silent
(load "~/.doom.d/42/list.el")
(load "~/.doom.d/42/string.el")
(load "~/.doom.d/42/comments.el")
(load "~/.doom.d/42/header.el")
#+end_src
*** norminette
#+begin_src emacs-lisp :tangle yes :results silent
(defun run-norminette-on-current-buffer ()
  (interactive)
  (defvar foo)
  (setq foo (concat "nm " (buffer-name) "" ))
  (shell-command foo))
#+end_src
*** integrate the C_formatter_42
#+begin_src emacs-lisp :tangle yes :results silent
(defun c-format-42 (&optional start end)
  "Format the current buffer or region using c_formatter_42.
If START and END are given, only format that region."
  (interactive "r")
  (let ((formatter "c_formatter_42")
        (buffer (current-buffer))
        (point (point))
        (window-start (window-start)))
    (unless (executable-find formatter)
      (error "Could not find c_formatter_42. Is it installed?"))
    (if (use-region-p)
        (shell-command-on-region start end formatter buffer t)
      (shell-command-on-region (point-min) (point-max) formatter buffer t))
    (goto-char point)
    (set-window-start (selected-window) window-start)))

#+end_src
** direnv
#+begin_src emacs-lisp :tangle yes :results silent
(use-package! envrc
  :hook (prog-mode . envrc-mode))

(after! lsp-clangd
  (setq lsp-clients-clangd-executable "clangd"))
#+end_src

* Mode-specific
** TESTING git
this mitigates the problem where the SSH authorisation doesnt let you push from
inside magit.
#+begin_src emacs-lisp :tangle yes :results silent
(after! exec-path-from-shell
  (add-to-list 'exec-path-from-shell-variables "SSH_AUTH_SOCK"))

(defun set-ssh-auth-sock ()
  "Set SSH_AUTH_SOCK environment variable."
  (interactive)
  (setenv "SSH_AUTH_SOCK" "/run/user/1000/keyring/ssh"))

(add-hook 'emacs-startup-hook 'set-ssh-auth-sock)
#+end_src
** Tree macs
#+begin_src emacs-lisp :tangle yes :results silent
(setq +treemacs-git-mode 'deferred)
#+end_src
** Org
*** TESTING get all org files recursively at the org directory
#+begin_src emacs-lisp :tangle yes :results silent
(defun sa-find-org-file-recursively (&optional directory filext)
  "Return .org and .org_archive files recursively from DIRECTORY.
If FILEXT is provided, return files with extension FILEXT instead."
  (interactive "DDirectory: ")
  (let* (org-file-list
     (case-fold-search t)         ; filesystems are case sensitive
     (file-name-regex "^[^.#].*") ; exclude dot, autosave, and backup files
     (filext (or filext "org$\\\|org_archive"))
     (fileregex (format "%s\\.\\(%s$\\)" file-name-regex filext))
     (cur-dir-list (directory-files directory t file-name-regex)))
    ;; loop over directory listing
    (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
      (cond
       ((file-regular-p file-or-dir) ; regular files
    (if (string-match fileregex file-or-dir) ; org files
        (add-to-list 'org-file-list file-or-dir)))
       ((file-directory-p file-or-dir)
    (dolist (org-file (sa-find-org-file-recursively file-or-dir filext)
              org-file-list) ; add files found to result
      (add-to-list 'org-file-list org-file)))))))

(setq org-agenda-files
      (append (sa-find-org-file-recursively org-directory)))
#+end_src
*** TESTING org-agenda
#+begin_src emacs-lisp :tangle yes :results silent
(after! org
  (use-package! org-super-agenda
    :after org-agenda
    :init
    (setq org-habit-show-done-always-green 't
          org-agenda-prefix-format
          '((agenda . " %?-12t% s")
            (todo . " %i %-12:c")
            (tags . " %i %-12:c")
            (search . " %i %-12:c")))
    (setq org-agenda-window-setup 'current-window)
    (setq org-agenda-start-day "+0d")
    (setq org-agenda-span 'day)
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-agenda-start-on-weekday nil)
    (setq org-agenda-dim-blocked-tasks nil) ;; makes main tasks visible in agenda-view
    (setq org-super-agenda-groups
          '((:name "Due today"
             :deadline today)
            (:name "Overdue"
             :deadline past)
            (:name "Due soon"
             :deadline future)
            (:name "Habits"
             :habit t)
            (:name "Start today"
             :scheduled today)
            (:name "Start soon"
             :scheduled future)
            (:name "Reschedule or review"
             :scheduled past)
            ))
    :config
    (org-super-agenda-mode)))
#+end_src

*** Logging
#+begin_src emacs-lisp :tangle yes :results silent
(after! org
  (setq org-log-done t)
  (setq org-log-into-drawer t))
#+end_src
*** TODO Calendar
*** TESTING Journal
#+begin_src emacs-lisp :tangle yes :results silent
  (setq org-journal-dir "~/org/journal"
        org-journal-date-prefix "#+TITLE: "
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-date-format "%A, %d %B %Y")
#+end_src
*** Export
#+begin_src emacs-lisp :tangle yes :results silent
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq org-export-with-smart-quotes t)
(setq-default TeX-master nil)

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)  ;; with AUCTeX LaTeX mode
#+end_src

* Claude Code Integration
Integrates Claude Code CLI with Emacs for AI-powered coding assistance.
#+begin_src emacs-lisp :tangle yes :results silent
(use-package! claude-code
  :vc (:url "https://github.com/stevemolitor/claude-code.el" :rev :newest)
  :config
  (claude-code-mode)
  (setq claude-code-terminal-backend 'eat))
#+end_src

* Key bindings
** Global
#+begin_src emacs-lisp :tangle yes :results silent
(map!
 ("M-q" #'kill-current-buffer)
 ("M-w" #'save-buffer)
 ("M-d" #'fill-paragraph)
 ("M-s" #'up-list)
 :leader
 (:desc "switch to treemacs" "-" #'treemacs-select-window)
 (:prefix-map ("z" . "Custom")
  :desc "Change to german" "g" #'my/switch-to-de-dict
  :desc "Change to english" "e" #'my/switch-to-en-dict
  :desc "Open Treemacs" "a" #'treemacs)
 (:prefix-map ("c" . "claude-code")
  :desc "Start Claude" "c" #'claude-code
  :desc "Send command" "s" #'claude-code-send-command
  :desc "Send region" "r" #'claude-code-send-region
  :desc "Fix error at point" "e" #'claude-code-fix-error-at-point
  :desc "Send return" "y" #'claude-code-send-return
  :desc "Send buffer" "b" #'claude-code-send-buffer))
#+end_src
** c-mode
#+begin_src emacs-lisp :tangle yes :results silent
(map! :map c-mode-map
      :leader
      (:prefix ("z" . "42")
       :desc "Format buffer/region " "f" #'c-format-42
       :desc "Tabify" "t" #'tabify
       :desc "Run norminette" "n" #'run-norminette-on-current-buffer
       :desc "Add comment box" "b" #'comments-insert-box
       :desc "Add header" "h" #'header-insert
       :desc "Add comment bar" "c" #'comments-insert-bar)
      (:prefix ("d" . "debug")
       :desc "Start debugging" "d" #'dap-debug
       :desc "Debug last configuration" "l" #'dap-debug-last
       :desc "Toggle breakpoint" "b" #'dap-breakpoint-toggle
       :desc "Continue" "c" #'dap-continue
       :desc "Step in" "i" #'dap-step-in
       :desc "Step out" "o" #'dap-step-out
       :desc "Step over" "s" #'dap-step-over
       :desc "Disconnect" "q" #'dap-disconnect))

#+end_src
