;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

* Overview
This is my Org file for creating the config.el for Doom Emacs. no need to run
Doom Sync after modifying. This config is literate, so needs to be run in
conjunction with [[file:~/.emacs.d/modules/config/literate/README.org::+TITLE: config/literate][Literate]] to work.

TODO indicates work still needs to be done or functionality is not fully
understood

KILL indicates that a given aspect is not implemented because it is not needed,
or doesn't apply to the specific application.
** Useful Links
[[https://tecosaur.github.io/emacs-config/config.html#windows,code--1][Techosaur's Literate Config]] provides a good orientation of what each module is
meant to do. It is highly descriptive which is really useful for learning the
basics
[[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org][Lissners guide to Doom Emacs]] gives a good overview of basic functionality.

** The Wishlist!
*** [[https://github.com/alphapapa/burly.el][burly.el]]
This package provides tools to save and restore frame and window configurations in Emacs, including buffers that may not be live anymore. In this way, it’s like a lightweight “workspace” manager, allowing you to easily restore one or more frames, including their windows, the windows’ layout, and their buffers.


* Background personal information
#+begin_src elisp :tangle yes
(setq user-full-name "William East"
      user-mail-address "williameast@live.com")
#+end_src
* TODO Email
This is my setup for Mu4e, using mbsync. all my email currently lands in
~/mail/live/inbox/~

#+BEGIN_SRC emacs-lisp :tangle yes
;; Each path is relative to `+mu4e-mu4e-mail-path', which is ~/.mail by default
(set-email-account! "live.com"
  '((mu4e-sent-folder       . "/live/Sent")
    (mu4e-drafts-folder     . "/live/Drafts")
    (mu4e-trash-folder      . "/live/Deleted")
    (mu4e-refile-folder     . "/live/inbox")
    (smtpmail-smtp-user     . "williameast@live.com")
    (mu4e-compose-signature . "---\nWilliam East"))
  t)
#+END_SRC

#+RESULTS:

** TODO adjust the [[file:~/.mbsyncrc::"IMAPStore" section needs to reference the account. This is not][.mbsyncrc]] to accept other emails
* TODO Language and Localisation
#+begin_src elisp :tangle yes

(setq ispell-dictionary "en_GB")

(global-set-key (kbd "C-c N")
  (lambda()(interactive)
    (ispell-change-dictionary "german")
    (flyspell-buffer)))

#+end_src
** TODO Auto-capitalise first letter and add apostrophes to implied contractions
** TODO add to dictionary short cut on SPC t
* TODO Rudimentary Settings
#+begin_src elisp :tangle yes

(setq-default
 window-combination-resize t            ; take window space from all windows not just selected
 x-stretch-cursor t)                    ; stretch cursor to the glyph width

(setq auto-save-default t
      truncate-string-ellipsis "…")     ; not working currently

(setq line-spacing 0.2)                 ; how great the distance between lines should be
#+end_src
* Quality of life
** KILL Full Screen Emacs on Start-up
#+begin_src elisp :tangle no
(if (eq initial-window-system 'x)                 ; if started by emacs command or desktop file
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+end_src
** Window Split lists currently open buffers
#+begin_src elisp :tangle yes

(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

(setq +ivy-buffer-preview t)

#+end_src
** TODO Capitalize the first letter of a sentence
** KILL Make $ go to the real EOL not the visual EOL
In org-mode, $ does not go to the real end of line, it jumps to the end of
/visual/ line. Create a real end of line by APPENDING and then going back to
normal state
#+begin_src elisp :tangle no
(defun my/real-end-of-line ()
      (interactive)
      (call-interactively 'evil-org-append-line)
      (call-interactively 'evil-force-normal-state))

(map!
    :after evil-org
    :desc (documentation 'evil-org-end-of-line) :n "$"  #'my/real-end-of-line)
#+end_src
* Aesthetics
** Themes and Fonts
#+begin_src elisp :tangle yes

(setq doom-font (font-spec :family "monospace" :size 14))

(setq doom-theme 'doom-one)

#+end_src

** Modeline
#+begin_src elisp :tangle yes

;; battery indicator
(unless (equal "Battery Status not available"
               (battery))
  (display-battery-mode 1))

;; Time display
(display-time-mode 1)


;; Hide encoding unless it is not UTF-8

(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

#+end_src
** Sideline
#+begin_src elisp :tangle yes

(setq display-line-numbers-type 'relative) ;; either `nil' or `relative'
#+end_src

* TODO Org
** General
#+begin_src elisp :tangle yes

;; set the org directory. must be done before org loads!
(setq org-directory "~/org/")

;; set line wrap to occur at 80 characters, I think
(add-hook 'text-mode-hook 'auto-fill-mode)

;; set level of subtrees to 9
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+end_src
** Org-Journal
#+begin_src elisp :tangle no
(use-package org-journal
  :init
  (setq org-journal-dir "~/org/daily"
        org-journal-date-prefix "#+TITLE: "
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-date-format "%A, %d %B %Y")
  )

(setq org-journal-enable-agenda-integration t)
#+end_src
** TODO Super-agenda
** KILL org-capture
#+begin_src elisp :tangle no
(after! org
  (add-to-list 'org-capture-templates
             '(("l" "Linus Questions" entry
               (file+headline "~/org/linus.org")
               "* TODO %?n"
               :prepend t :kill-buffer t))
#+end_src
* TODO Tex
** KILL Auctex
This is just a bunch of stuff i hacked together from the internet. No idea how
it works.
#+begin_src elisp :tangle no
;; auctex
(use-package auctex
  :ensure t
  :after latex
  :init
  (setq tab-width 2
        LaTeX-item-indent 0 latex "latex"
        pdf-latex-command "xelatex"
        TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list
        '(("PDF Tools" TeX-pdf-tools-sync-view)))
  (setq-default TeX-engine 'xetex)
  (add-hook
   'TeX-after-compilation-finished-functions
   #'TeX-revert-document-buffer)
  :hook
  ;; (TeX-after-compilation-finished-functions
  ;;  . TeX-revert-document-buffer)
  (LaTeX-mode .
              (lambda()
                (add-to-list
                 'TeX-command-list
                 '("XeLaTeX" "%`xelatex --synctex=1%(mode)%' %t"
                   TeX-run-TeX nil t))
                (setq TeX-command-default "XeLaTeX"
                      TeX-source-correlate-mode t)))
  :bind (:map LaTeX-mode-map
              ("C-c C-c" .
               (lambda (ARG)
                 (interactive "P")
                 (save-buffer)
                 (TeX-command-run-all ARG)))
              ("C-l <backspace>"
               . (lambda ()
                   (interactive)
                   (TeX-clean)
                   (message "Cleaned!")))))

#+end_src
** TODO Reftex
this tool is for managing the bibliography. Currently do not have a bib file so
is left in for later completion.
#+begin_src elisp :tangle no
(setq reftex-default-bibliography "/your/bib/file.bib") ;; change the path
#+end_src
** KILL PDF viewer
For previewing the PDFs that latex generates. I have the option of choosing the default order.
setting to ~nil~ makes ~DocView~ the default.
#+begin_src elisp :tangle no
(setq +latex-viewers '(zathura))
#+end_src

* Transcription Capabilities
I do a lot of transcription, and using this [[file:packages.el::(package! transcription-mode][repo]] can control VLC from Emacs.
useful for not having to leave the document to scrub the audio (video) files.
#+begin_src elisp :tangle yes
(use-package! transcription-mode)
#+end_src
